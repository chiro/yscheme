program <- comment {
        (load "/home/chir/src/yscheme/util.lisp")
        (princ "comment\n")
        (princ data)
}

datum <- intertoken_space (simple_datum / compound_datum / label "=" datum / label "#") intertoken_space
simple_datum <- boolean / number / character / string / symbol / bytevector
symbol <- identifier
compound_datum <- list / vector
list <- "(" datum* ")" / "(" datum+ "." datum ")" / abbreviation
abbreviation <- abbrev_prefix datum
abbrev_prefix <- "'" / "`" / ",@" / ","
vector <- "#(" datum* ")"
label <- "#" digit10+



token <- identifier delimiter / boolean delimiter / number delimiter / character delimiter / string/ "(" / ")" / "#(" / "\'" / "\`" / ",@" / "," / "."

delimiter <- whitespace / "(" / ")" / [\"] / ";"

comment <- ("\;" (!newline .)*) { (princ "one line comment\n") (princ data) (princ "\n") } / nested_comment { (princ "nested\n") (princ data) (princ "\n")  }
nested_comment <- "#|" comment_text comment_cont* "|#" { (princ "inner nested\n") (list :nested_comment (second data)) }

comment_text <- (!comment_text_taboo .)* { (charl-to-str (mapcar #'cadr (first data))) }
comment_text_taboo <- "#|" / "|#"
comment_cont <- nested_comment comment_text {
             (princ "cont\n")
             (princ data)
             (princ "\n")
             (drop-last data)
}

atmosphere <- whitespace / comment
intertoken_space <- atmosphere*

whitespace <- (intraline_whitespace / newline / return)
newline <- [\n]
return <- [\r]
intraline_whitespace <- [ \t]
line_ending <- newline / return

backslash <- [\\]


identifier <- (initial subsequent* / "|" symbol_element* "|" / peculiar_identifier)
initial <- letter / special_initial / inline_hex_escape
letter <- [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]
special_initial <- [!$%&*/:<=>?^_~]
subsequent <- initial / digit / special_subsequent
digit <- [0123456789]
hex_digit <- digit / [abcdefABCDEF]

explicit_sign <- [\+\-]
special_subsequent <- explicit_sign / "." / "@"

inline_hex_escape <- backslash "x" hex_scalar_value ";"
hex_scalar_value <- hex_digit+

symbol_element <- !"|" !backslash .

non-digit <- dot_subsequent / explicit_sign
dot_subsequent <- sign_subsequent / "."
sign_subsequent <- initial / explicit_sign / "@"

peculiar_identifier <- explicit_sign / explicit_sign sign_subsequent subsequent* / explicit_sign "." dot_subsequent subsequent* / "." non-digit subsequent*

syntactic_keyword <- expression_keyword / "else" / "=>" / "define" / "unquote" / "unquote-splicing"
expression_keyword <- "quote" / "lambda" / "if" / "set!" / "begin" / "cond" / "and" / "or" / "case" / "let" / "let*" / "letrec" / "do" / "delay" / "quasiquote"

variable <- !syntactic_keyword identifier

boolean <- "#t" / "#f"

character <- "#\\" (character_name / .) / "#\\x" hex_scalar_value
character_name <- "null" / "alarm" / "backspace" / "tab" / "newline" / "return" / "escape" / "space" / "delete"

string <- [\"] string_element* [\"]
string_element <- (![\"\\] .) / ([\\] [abtnr\"\\]) / [\\] intraline_whitespace line_ending intraline_whitespace / inline_hex_escape

bytevector <- "#u8(" intertoken_space* (byte intertoken_space*)* ")"
byte <- digit+



number <- num2 / num8 / num10 / num16

num2 <- prefix2 complex2
complex2 <- real2 / real2 "@" real2 / real2 ("+" / "-") ureal2 "i" / real2 ("+" / "-") "i" / ("+" / "-") ureal2 "i" / ("+" / "-") "i"
real2 <- sign ureal2 / infinity
ureal2 <- uinteger2 / uinteger2 "/" uinteger2 / decimal2
decimal2 <- uinteger2 suffix / "." digit2+ "#"* suffix / digit2+ "." digit2* "#"* suffix / digit2+ "#"+ "." "#"* suffix
uinteger2 <- digit2+ "#"*
prefix2 <- radix2 exactness / exactness radix2

num8 <- prefix8 complex8
complex8 <- real8 / real8 "@" real8 / real8 ("+" / "-") ureal8 "i" / real8 ("+" / "-") "i" / ("+" / "-") ureal8 "i" / ("+" / "-") "i"
real8 <- sign ureal8 / infinity
ureal8 <- uinteger8 / uinteger8 "/" uinteger8 / decimal8
decimal8 <- uinteger8 suffix / "." digit8+ "#"* suffix / digit8+ "." digit8* "#"* suffix / digit8+ "#"+ "." "#"* suffix
uinteger8 <- digit8+ "#"*
prefix8 <- radix8 exactness / exactness radix8

num10 <- prefix10 complex10
complex10 <- real10 / real10 "@" real10 / real10 ("+" / "-") ureal10 "i" / real10 ("+" / "-") "i" / ("+" / "-") ureal10 "i" / ("+" / "-") "i"
real10 <- sign ureal10 / infinity
ureal10 <- uinteger10 / uinteger10 "/" uinteger10 / decimal10
decimal10 <- uinteger10 suffix / "." digit10+ "#"* suffix / digit10+ "." digit10* "#"* suffix / digit10+ "#"+ "." "#"* suffix
uinteger10 <- digit10+ "#"*
prefix10 <- radix10 exactness / exactness radix10

num16 <- prefix16 complex16
complex16 <- real16 / real16 "@" real16 / real16 ("+" / "-") ureal16 "i" / real16 ("+" / "-") "i" / ("+" / "-") ureal16 "i" / ("+" / "-") "i"
real16 <- sign ureal16 / infinity
ureal16 <- uinteger16 / uinteger16 "/" uinteger16 / decimal16
decimal16 <- uinteger16 suffix / "." digit16+ "#"* suffix / digit16+ "." digit16* "#"* suffix / digit16+ "#"+ "." "#"* suffix
uinteger16 <- digit16+ "#"*
prefix16 <- radix16 exactness / exactness radix16

infinity <- "+inf.0" / "-inf.0" / "+nan.0"

suffix <- (exponent_marker sign digit10+)?
exponent_marker <- [esfdl]
sign <- ("+" / "-")?
exactness <- ("#i" / "#e")?
radix2 <- "#b"
radix8 <- "#o"
radix10 <- "#d"?
radix16 <- "#x"

digit2 <- "0" / "1"
digit8 <- [01234567]
digit10 <- digit
digit16 <- [0123456789abcdef]
